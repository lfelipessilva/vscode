{
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "vscode.css-language-features"
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "rvest.vs-code-prettier-eslint"
  },
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "editor.fontFamily": "Fira code,  monospace",
  "workbench.colorTheme": "Catppuccin Mocha",
  "workbench.iconTheme": "material-icon-theme",
  "editor.fontSize": 14,
  "editor.fontLigatures": true,
  "editor.fontWeight": 500,
  "editor.lineNumbers": "relative",
  "tabnine.experimentalAutoImports": true,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "git.autofetch": true,
  "workbench.editor.enablePreview": false,
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "editor.tabSize": 2,
  "javascript.preferences.quoteStyle": "single",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "terminal.integrated.fontSize": 14,
  "editor.suggestSelection": "first",
  "files.exclude": {
    "**/.classpath": true,
    "**/.project": true,
    "**/.settings": true,
    "**/.factorypath": true
  },
  "window.menuBarVisibility": "hidden",
  "window.zoomLevel": 0.8,
  "security.workspace.trust.untrustedFiles": "open",
  "editor.guides.bracketPairs": "active",
  "diffEditor.ignoreTrimWhitespace": false,
  "gitlens.views.commits.files.layout": "tree",
  "diffEditor.maxComputationTime": 0,
  "editor.minimap.enabled": false,
  "vim.leader": "<space>",
  "vim.normalModeKeyBindings": [
    {
      "before": ["K"],
      "commands": ["editor.action.showHover"]
    },
    {
      "before": ["leader", "q"],
      "commands": ["editor.action.quickFix"]
    },
    {
      "before": ["leader", "s"],
      "commands": ["bennycode.sort-everything.sortFile"]
    },
    {
      "before": ["leader", "f"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["<S-h>"],
      "commands": ["workbench.action.previousEditor"]
    },
    {
      "before": ["<S-l>"],
      "commands": ["workbench.action.nextEditor"]
    }
  ],
  "dart.flutterSdkPath": "/home/luisfelipe/flutter",
  "dart.hotReloadOnSave": "all",
  "[dart]": {
    // Automatically format code on save and during typing of certain characters
    // (like `;` and `}`).
    "editor.formatOnSave": true,
    "editor.formatOnType": true,

    // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
    "editor.rulers": [80],

    // Disables built-in highlighting of words that match your selection. Without
    // this, all instances of the selected text will be highlighted, interfering
    // with Dart's ability to highlight only exact references to the selected variable.
    "editor.selectionHighlight": false,

    // By default, VS Code prevents code completion from popping open when in
    // "snippet mode" (editing placeholders in inserted code). Setting this option
    // to `false` stops that and allows completion to open as normal, as if you
    // weren't in a snippet placeholder.
    "editor.suggest.snippetsPreventQuickSuggestions": false,

    // By default, VS Code will pre-select the most recently used item from code
    // completion. This is usually not the most relevant item.
    //
    // "first" will always select top item
    // "recentlyUsedByPrefix" will filter the recently used items based on the
    //     text immediately preceding where completion was invoked.
    "editor.suggestSelection": "first",

    // Allows pressing <TAB> to complete snippets such as `for` even when the
    // completion list is not visible.
    "editor.tabCompletion": "onlySnippets",

    // By default, VS Code will populate code completion with words found in the
    // current file when a language service does not provide its own completions.
    // This results in code completion suggesting words when editing comments and
    // strings. This setting will prevent that.
    "editor.wordBasedSuggestions": false
  },
  "dart.flutterHotReloadOnSave": "all"
}
